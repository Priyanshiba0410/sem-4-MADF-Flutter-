---------------------------------------------simple crud----------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'database.dart';
import 'user.dart';

class UserCrudApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'CRUD App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: UserListPage(),
    );
  }
}

class User {
  int? id;
  String name;
  int age;
  String email;
  String city;

  User({this.id, required this.name, required this.age, required this.email, required this.city});

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'age': age,
      'email': email,
      'city': city,
    };
  }

  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      id: map['id'],
      name: map['name'],
      age: map['age'],
      email: map['email'],
      city: map['city'],
    );
  }
}

class UserListPage extends StatefulWidget {
  @override
  _UserListPageState createState() => _UserListPageState();
}

class _UserListPageState extends State<UserListPage> {
  List<User> userList = [];
  List<User> filteredUsers = [];
  final MyDatabase db = MyDatabase();
  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUsers();
    _searchController.addListener(_filterUsers);
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void _loadUsers() async {
    final users = await db.fetchUsers();
    setState(() {
      userList = users;
      filteredUsers = users;
    });
  }

  void _filterUsers() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      filteredUsers = userList.where((user) {
        return user.name.toLowerCase().contains(query) ||
            user.email.toLowerCase().contains(query) ||
            user.city.toLowerCase().contains(query);
      }).toList();
    });
  }

  void _addUser(User user) async {
    await db.addUser(user);
    _loadUsers();
  }

  void _updateUser(int index, User updatedUser) async {
    await db.updateUser(updatedUser);
    _loadUsers();
  }

  void _deleteUser(int id) async {
    await db.deleteUser(id);
    _loadUsers();
  }

  void _showUserForm({User? user, int? index}) {
    final _nameController = TextEditingController(text: user?.name ?? '');
    final _ageController = TextEditingController(text: user?.age.toString() ?? '');
    final _emailController = TextEditingController(text: user?.email ?? '');
    final _cityController = TextEditingController(text: user?.city ?? '');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(user == null ? 'Add User' : 'Edit User'),
        content: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                  controller: _nameController,
                  keyboardType: TextInputType.name,
                  textCapitalization: TextCapitalization.words,
                  decoration: InputDecoration(labelText: 'Name')),
              TextField(
                  controller: _ageController,
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(labelText: 'Age')),
              TextField(
                  controller: _emailController,
                  keyboardType: TextInputType.emailAddress,
                  decoration: InputDecoration(labelText: 'Email')),
              TextField(
                  controller: _cityController,
                  keyboardType: TextInputType.text,
                  textCapitalization: TextCapitalization.words,
                  decoration: InputDecoration(labelText: 'City')),
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.of(context).pop(), child: Text('Cancel')),
          ElevatedButton(
            onPressed: () {
              final name = _nameController.text;
              final age = int.tryParse(_ageController.text) ?? 0;
              final email = _emailController.text;
              final city = _cityController.text;

              if (name.isNotEmpty && email.isNotEmpty && city.isNotEmpty) {
                final newUser = User(id: user?.id, name: name, age: age, email: email, city: city);
                if (user == null) {
                  _addUser(newUser);
                } else if (index != null) {
                  _updateUser(index, newUser);
                }
                Navigator.of(context).pop();
              }
            },
            child: Text(user == null ? 'Add' : 'Update'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('User List')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Search Users',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0)),
              ),
            ),
          ),
          Expanded(
            child: filteredUsers.isEmpty
                ? Center(child: Text('No users found!'))
                : ListView.builder(
              itemCount: filteredUsers.length,
              itemBuilder: (context, index) {
                final user = filteredUsers[index];
                return ListTile(
                  title: Text(user.name),
                  subtitle: Text('${user.age} years old, ${user.email}, ${user.city}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(icon: Icon(Icons.edit, color: Colors.blue), onPressed: () => _showUserForm(user: user, index: index)),
                      IconButton(icon: Icon(Icons.delete, color: Colors.red), onPressed: () => _deleteUser(user.id!)),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showUserForm(),
        child: Icon(Icons.add),
      ),
    );
  }
}
-------------------------------------------------database--------------------------------------------
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'crud.dart';
import 'user.dart'; // Import User model

class MyDatabase {
  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await initDatabase();
    return _database!;
  }

  Future<Database> initDatabase() async {
    return await openDatabase(
      join(await getDatabasesPath(), 'my_database.db'),
      version: 1,
      onCreate: (db, version) {
        return db.execute(
            "CREATE TABLE User(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER, email TEXT, city TEXT)"
        );
      },
    );
  }

  Future<int> addUser(User user) async {
    Database db = await database;
    return await db.insert("User", user.toMap());
  } 

  Future<List<User>> fetchUsers() async {
    Database db = await database;
    final List<Map<String, dynamic>> maps = await db.query("User");
    return List.generate(maps.length, (i) => User.fromMap(maps[i]));
  }

  Future<int> updateUser(User user) async {
    Database db = await database;
    return await db.update(
      "User",
      user.toMap(),
      where: "id = ?",
      whereArgs: [user.id],
    );
  }

  Future<int> deleteUser(int id) async {
    Database db = await database;
    return await db.delete("User", where: "id = ?", whereArgs: [id]);
  }
}